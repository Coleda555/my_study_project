"""
Ключевое различие
Реализуйте функцию key_difference(), которая принимает в качестве аргументов два словаря, находит различия между ними и
возвращает словарь с названиями ключей и с состояниями каждого ключа в виде его значения при переходе от первого словаря
 ко второму в формате:

added, если ключа не было в первом словаре, но он появился во втором;
deleted, если ключ был в первом словаре, но его не было во втором;
changed, если ключ присутствует в обоих словарях, но значения различаются;
equal, если ключ присутствует в обоих словарях, и значения совпадают.
Примечание 1. Гарантируется, что ключи и значения словарей представлены исключительно в строковом типе данных.

Примечание 2. Ключи в возвращаемом функцией словаре должны располагаться в следующем порядке: сначала все ключи первого
 словаря, затем — второго.

Примечание 3. Рассмотрим первый тест. Первый словарь содержит ключи 'one', 'two' и 'four', второй — 'two', 'zero' и
'four'. Тогда в возвращаемом функцией словаре они должны иметь следующие значения-состояния:

'one' — 'deleted', так как присутствует в первом словаре и отсутствует во втором;
'two' — 'changed', так как присутствует в обоих словарях, но с различными значениями;
'four' — 'equal', так как присутствует в обоих словарях с совпадающими значениями;
'zero' — 'added', так как отсутствует в первом словаре и присутствует во втором.
Примечание 4. В тестирующую систему сдайте программу, содержащую только необходимую функцию key_difference(), но не код,
 вызывающий ее.

Sample Input 1:

dict1 = {'one': 'eon', 'two': 'two', 'four': 'True'}
dict2 = {'two': 'own', 'zero': '4', 'four': 'True'}

result = key_difference(dict1, dict2)

print(result)
Sample Output 1:

{'one': 'deleted', 'two': 'changed', 'four': 'equal', 'zero': 'added'}
Sample Input 2:

dict1 = {'one': 'eon', 'two': 'two', 'four': 'True'}
dict2 = {}

result = key_difference(dict1, dict2)

print(result)
Sample Output 2:

{'one': 'deleted', 'two': 'deleted', 'four': 'deleted'}
"""